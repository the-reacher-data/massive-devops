name: üöÄ Production Release Devops

on:
  push:
    branches: ["main"]
    paths-ignore:
      - "CHANGELOG.md"
      - "pyproject.toml"

concurrency:
    group: release-${{ github.ref }}
    cancel-in-progress: false
env:
  PYTHON_VERSION: "3.12"
  DOCS_DIR: "docs"
  SRC_DIR_DOCS: "actions"

permissions:
  contents: write
  pull-requests: read
  id-token: write
  pages: write
  actions: read

jobs:
  detect-branch:
    name: üîé Detect Branch from PR Comment
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.extract.outputs.branch }}
      pr-number: ${{ steps.extract-pr-number.outputs.pr-number }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Find merged PR number
        id: extract-pr-number
        shell: bash
        env:
          GH_TOKEN: ${{ SECRETS.GITHUB_TOKEN }}
        run: |
          echo "üîé Searching PR for squash commit ${{ inputs.github-sha }}"
          pr_number=$(gh pr list \
          --repo ${{ github.repository }} \
          --base main \
          --state closed \
          --json number,mergeCommit \
          --jq '.[] | select(.mergeCommit.oid=="'${{ github.sha }}'") | .number')

          if [ -z "$pr_number" ]; then
            echo "‚ö†Ô∏è No PR found with mergeCommit=${{ github.sha }}"
            echo "üîÑ Falling back to latest closed PR targeting main..."
            pr_number=$(gh pr list \
            --repo ${{ github.repository }} \
            --base main \
            --state closed \
            --limit 1 \
            --json number \
            --jq '.[0].number')
          fi

          if [ -z "$pr_number" ]; then
            echo "‚ùå Still no PR found. Exiting."
            exit 1
          fi

          echo "‚úÖ Found PR: $pr_number"
          echo "pr-number=$pr_number" >> $GITHUB_OUTPUT

      - id: extract
        name: Find branch from PR comment
        shell: bash
        env:
          GH_TOKEN: ${{ SECRETS.GITHUB_TOKEN }}
        run: |
          echo "Fetching PR (${{ steps.extract-pr-number.outputs.pr-number }}) comments..."
          comments=$(gh api repos/${{ github.repository }}/issues/${{ steps.extract-pr-number.outputs.pr-number }}/comments --jq '.[].body')
          branch=$(echo "$comments" | grep -o '<!-- branch-source:[^>]* -->' | sed -E 's/<!-- branch-source:(.*) -->/\1/' | tail -n 1)
          echo "Comments: $comments"
          if [ -z "$branch" ]; then
            echo "‚ùå No branch-source tag found in PR ${{ steps.extract-pr-number.outputs.pr-number }}"
            exit 1
          fi
          echo "‚úÖ Found branch: $branch"
          echo "branch=$branch" >> $GITHUB_OUTPUT
  build_version:
    name: üìù Generate Version
    runs-on: ubuntu-latest
    needs: [detect-branch]
    outputs:
      version: ${{ steps.version.outputs.version }}
      deploy: ${{ steps.version.outputs.deploy }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: astral-sh/setup-uv@v3
      - run: uv sync --all-extras

      - name: Get Version Branch Semantic
        id: version
        uses: ./actions/devops/versioning-branch-semantic
        with:
          branch: ${{ needs.detect-branch.outputs.branch }}
          prerelease: "false"

      - name: Generate Changelog
        uses: ./actions/devops/changelog-conventional-commit
        with:
          mode: "release"
          branch: ${{ needs.detect-branch.outputs.branch }}
          version: ${{ steps.version.outputs.version }}
          pr-number: ${{ needs.detect-branch.outputs.pr-number }}
          output: version.md

      - name: Commit version bump and changelog
        run: |
          VERSION=${{ steps.version.outputs.version }}
          PR_NUMBER=${{ needs.detect-branch.outputs.pr-number }}
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add pyproject.toml CHANGELOG.md || true

          if [[ "$GITHUB_RUN_ATTEMPT" -gt 1 ]]; then
              echo "üîÑ This is a re-run (attempt $GITHUB_RUN_ATTEMPT)"
              exit 0
          fi
          if [[ "$VERSION" != "UNRELEASED" ]]; then
            git commit -m "chore(release): ${VERSION} (#${PR_NUMBER})"
          else
            git commit -m "docs(changelog): update changelog (#${PR_NUMBER})"
          fi
          git push
          echo "‚úÖ Committed with changes"

  publish_docs:
    name: üìö Publish Docs
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.docs.outputs.page-url }}
    needs: [build_version]
    if: ${{ needs.build_version.outputs.deploy == 'true' && github.event.repository.private == false }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: astral-sh/setup-uv@v3
      - run: uv sync --all-extras
      - name: Upload Docs
        id: docs
        uses: ./actions/python/autogenerate-docs
        with:
          docs-dir: ${{ env.DOCS_DIR }}
          src-dir: ${{ env.SRC_DIR_DOCS }}
          mode: "release"

  tag:
    name: üîñ Create Release Tag
    runs-on: ubuntu-latest
    needs: [build_version]
    if: ${{ needs.build_version.outputs.deploy == 'true' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Create Git Tag
        env:
          VERSION: ${{ needs.build_version.outputs.version }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "v${VERSION}"
          git push origin "v${VERSION}"
